// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var deathio = deathio || {};

/**
 * @enum
 */
deathio.EntityType = {
  DebugCircle: 0,
  Border: 1,
  RoundTree: 2,
  MarioTree: 3,
  Character: 4,
  Stone: 5,
  Bronze: 6,
  Iron: 7,
  BerryBush: 8
};

/**
 * @constructor
 */
deathio.Vec3f = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {deathio.Vec3f}
 */
deathio.Vec3f.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
deathio.Vec3f.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
deathio.Vec3f.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
deathio.Vec3f.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
deathio.Vec3f.createVec3f = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
deathio.Vec2f = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {deathio.Vec2f}
 */
deathio.Vec2f.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
deathio.Vec2f.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
deathio.Vec2f.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @returns {flatbuffers.Offset}
 */
deathio.Vec2f.createVec2f = function(builder, x, y) {
  builder.prep(4, 8);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
deathio.AABB = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {deathio.AABB}
 */
deathio.AABB.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {deathio.Vec2f=} obj
 * @returns {deathio.Vec2f}
 */
deathio.AABB.prototype.lower = function(obj) {
  return (obj || new deathio.Vec2f).__init(this.bb_pos, this.bb);
};

/**
 * @param {deathio.Vec2f=} obj
 * @returns {deathio.Vec2f}
 */
deathio.AABB.prototype.upper = function(obj) {
  return (obj || new deathio.Vec2f).__init(this.bb_pos + 8, this.bb);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lower_x
 * @param {number} lower_y
 * @param {number} upper_x
 * @param {number} upper_y
 * @returns {flatbuffers.Offset}
 */
deathio.AABB.createAABB = function(builder, lower_x, lower_y, upper_x, upper_y) {
  builder.prep(4, 16);
  builder.prep(4, 8);
  builder.writeFloat32(upper_y);
  builder.writeFloat32(upper_x);
  builder.prep(4, 8);
  builder.writeFloat32(lower_y);
  builder.writeFloat32(lower_x);
  return builder.offset();
};

/**
 * @constructor
 */
deathio.Entity = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {deathio.Entity}
 */
deathio.Entity.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {deathio.Entity=} obj
 * @returns {deathio.Entity}
 */
deathio.Entity.getRootAsEntity = function(bb, obj) {
  return (obj || new deathio.Entity).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
deathio.Entity.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {deathio.Vec2f=} obj
 * @returns {deathio.Vec2f}
 */
deathio.Entity.prototype.pos = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new deathio.Vec2f).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
deathio.Entity.prototype.radius = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
deathio.Entity.prototype.rotation = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {deathio.EntityType}
 */
deathio.Entity.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {deathio.EntityType} */ (this.bb.readUint16(this.bb_pos + offset)) : deathio.EntityType.DebugCircle;
};

/**
 * @param {deathio.AABB=} obj
 * @returns {deathio.AABB}
 */
deathio.Entity.prototype.aabb = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new deathio.AABB).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
deathio.Entity.startEntity = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} id
 */
deathio.Entity.addId = function(builder, id) {
  builder.addFieldInt64(0, id, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 */
deathio.Entity.addPos = function(builder, posOffset) {
  builder.addFieldStruct(1, posOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} radius
 */
deathio.Entity.addRadius = function(builder, radius) {
  builder.addFieldInt16(2, radius, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rotation
 */
deathio.Entity.addRotation = function(builder, rotation) {
  builder.addFieldFloat32(3, rotation, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {deathio.EntityType} type
 */
deathio.Entity.addType = function(builder, type) {
  builder.addFieldInt16(4, type, deathio.EntityType.DebugCircle);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} aabbOffset
 */
deathio.Entity.addAabb = function(builder, aabbOffset) {
  builder.addFieldStruct(5, aabbOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
deathio.Entity.endEntity = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
deathio.GameState = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {deathio.GameState}
 */
deathio.GameState.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {deathio.GameState=} obj
 * @returns {deathio.GameState}
 */
deathio.GameState.getRootAsGameState = function(bb, obj) {
  return (obj || new deathio.GameState).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
deathio.GameState.prototype.tick = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
deathio.GameState.prototype.playerId = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {number} index
 * @param {deathio.Entity=} obj
 * @returns {deathio.Entity}
 */
deathio.GameState.prototype.entities = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new deathio.Entity).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
deathio.GameState.prototype.entitiesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
deathio.GameState.startGameState = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} tick
 */
deathio.GameState.addTick = function(builder, tick) {
  builder.addFieldInt64(0, tick, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} playerId
 */
deathio.GameState.addPlayerId = function(builder, playerId) {
  builder.addFieldInt64(1, playerId, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} entitiesOffset
 */
deathio.GameState.addEntities = function(builder, entitiesOffset) {
  builder.addFieldOffset(2, entitiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
deathio.GameState.createEntitiesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
deathio.GameState.startEntitiesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
deathio.GameState.endGameState = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
deathio.GameState.finishGameStateBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.deathio = deathio;
