// automatically generated by the FlatBuffers compiler, do not modify

import {flatbuffers} from "./flatbuffers"

/**
 * @enum
 */
export namespace BerryhunterApi {
    export enum ActionType {
        Primary = 0,
        CraftItem = 1,
        EquipItem = 2,
        UnequipItem = 3,
        DropItem = 4,
        PlaceItem = 5,
        ConsumeItem = 6
    }
}
;

/**
 * @constructor
 */
export namespace BerryhunterApi {
    export class Vec3f {
        /**
         * @type {flatbuffers.ByteBuffer}
         */
        bb: flatbuffers.ByteBuffer | null = null;

        /**
         * @type {number}
         */
        bb_pos: number = 0;

        /**
         * @param {number} i
         * @param {flatbuffers.ByteBuffer} bb
         * @returns {Vec3f}
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Vec3f {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        };

        /**
         * @returns {number}
         */
        x(): number {
            return this.bb!.readFloat32(this.bb_pos);
        };

        /**
         * @returns {number}
         */
        y(): number {
            return this.bb!.readFloat32(this.bb_pos + 4);
        };

        /**
         * @returns {number}
         */
        z(): number {
            return this.bb!.readFloat32(this.bb_pos + 8);
        };

        /**
         * @param {flatbuffers.Builder} builder
         * @param {number} x
         * @param {number} y
         * @param {number} z
         * @returns {flatbuffers.Offset}
         */
        static createVec3f(builder: flatbuffers.Builder, x: number, y: number, z: number): flatbuffers.Offset {
            builder.prep(4, 12);
            builder.writeFloat32(z);
            builder.writeFloat32(y);
            builder.writeFloat32(x);
            return builder.offset();
        };

    }
}
/**
 * @constructor
 */
export namespace BerryhunterApi {
    export class Vec2f {
        /**
         * @type {flatbuffers.ByteBuffer}
         */
        bb: flatbuffers.ByteBuffer | null = null;

        /**
         * @type {number}
         */
        bb_pos: number = 0;

        /**
         * @param {number} i
         * @param {flatbuffers.ByteBuffer} bb
         * @returns {Vec2f}
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Vec2f {
            this.bb_pos = i;
            this.bb = bb;
            return this;
        };

        /**
         * @returns {number}
         */
        x(): number {
            return this.bb!.readFloat32(this.bb_pos);
        };

        /**
         * @returns {number}
         */
        y(): number {
            return this.bb!.readFloat32(this.bb_pos + 4);
        };

        /**
         * @param {flatbuffers.Builder} builder
         * @param {number} x
         * @param {number} y
         * @returns {flatbuffers.Offset}
         */
        static createVec2f(builder: flatbuffers.Builder, x: number, y: number): flatbuffers.Offset {
            builder.prep(4, 8);
            builder.writeFloat32(y);
            builder.writeFloat32(x);
            return builder.offset();
        };

    }
}
