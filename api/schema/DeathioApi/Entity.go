// automatically generated by the FlatBuffers compiler, do not modify

package DeathioApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Entity struct {
	_tab flatbuffers.Table
}

func GetRootAsEntity(buf []byte, offset flatbuffers.UOffsetT) *Entity {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Entity{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Entity) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Entity) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Entity) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entity) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Entity) Pos(obj *Vec2f) *Vec2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Entity) Radius() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entity) MutateRadius(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *Entity) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Entity) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Entity) Type() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entity) MutateType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *Entity) Aabb(obj *AABB) *AABB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(AABB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func EntityStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EntityAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func EntityAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func EntityAddRadius(builder *flatbuffers.Builder, radius uint16) {
	builder.PrependUint16Slot(2, radius, 0)
}
func EntityAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(3, rotation, 0.0)
}
func EntityAddType(builder *flatbuffers.Builder, t uint16) {
	builder.PrependUint16Slot(4, t, 0)
}
func EntityAddAabb(builder *flatbuffers.Builder, aabb flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(aabb), 0)
}
func EntityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
