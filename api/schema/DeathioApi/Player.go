// automatically generated by the FlatBuffers compiler, do not modify

package DeathioApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Player struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayer(buf []byte, offset flatbuffers.UOffsetT) *Player {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Player{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Player) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Player) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Player) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Player) Pos(obj *Vec2f) *Vec2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Player) Radius() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateRadius(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *Player) EntityType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateEntityType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *Player) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Player) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Player) IsHit() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateIsHit(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *Player) ActionTick() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateActionTick(n uint16) bool {
	return rcv._tab.MutateUint16Slot(16, n)
}

func (rcv *Player) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Player) Equipment(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Player) EquipmentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Player) EquipmentBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Player) Health() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateHealth(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func (rcv *Player) Satiety() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateSatiety(n byte) bool {
	return rcv._tab.MutateByteSlot(24, n)
}

func (rcv *Player) BodyTemperature() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateBodyTemperature(n byte) bool {
	return rcv._tab.MutateByteSlot(26, n)
}

func (rcv *Player) Aabb(obj *AABB) *AABB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(AABB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PlayerStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func PlayerAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func PlayerAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func PlayerAddRadius(builder *flatbuffers.Builder, radius uint16) {
	builder.PrependUint16Slot(2, radius, 0)
}
func PlayerAddEntityType(builder *flatbuffers.Builder, entityType uint16) {
	builder.PrependUint16Slot(3, entityType, 0)
}
func PlayerAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(4, rotation, 0.0)
}
func PlayerAddIsHit(builder *flatbuffers.Builder, isHit byte) {
	builder.PrependByteSlot(5, isHit, 0)
}
func PlayerAddActionTick(builder *flatbuffers.Builder, actionTick uint16) {
	builder.PrependUint16Slot(6, actionTick, 0)
}
func PlayerAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func PlayerAddEquipment(builder *flatbuffers.Builder, equipment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(equipment), 0)
}
func PlayerStartEquipmentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PlayerAddHealth(builder *flatbuffers.Builder, health byte) {
	builder.PrependByteSlot(9, health, 0)
}
func PlayerAddSatiety(builder *flatbuffers.Builder, satiety byte) {
	builder.PrependByteSlot(10, satiety, 0)
}
func PlayerAddBodyTemperature(builder *flatbuffers.Builder, bodyTemperature byte) {
	builder.PrependByteSlot(11, bodyTemperature, 0)
}
func PlayerAddAabb(builder *flatbuffers.Builder, aabb flatbuffers.UOffsetT) {
	builder.PrependStructSlot(12, flatbuffers.UOffsetT(aabb), 0)
}
func PlayerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
