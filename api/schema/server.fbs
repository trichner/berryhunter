include "common.fbs";

namespace BerryhunterApi;

enum EntityType : ushort {
  DebugCircle = 0,
  Border,
  RoundTree,
  MarioTree,
  Character,
  Stone,
  Bronze,
  Iron,
  BerryBush,
  Dodo,
  SaberToothCat,
  Mammoth,
  Placeable
}

struct AABB {
  lower:Vec2f;
  upper:Vec2f;
}

struct ItemStack {
  item:ubyte;
  count:uint;
  slot:ubyte;
}

// Workaround to make vector of union possible
union AnyEntity { Player, Mob, Resource, Placeable }
table Entity { e:AnyEntity; }

table Resource {
  id:ulong;
  entity_type:EntityType;

  pos:Vec2f;
  radius:ushort;

  aabb:AABB;
}

table Placeable {
  id:ulong;
  entity_type:EntityType;

  pos:Vec2f;
  radius:ushort;
  item:ubyte;

  aabb:AABB;
}

table Mob {
  id:ulong;
  entity_type:EntityType;

  pos:Vec2f;
  radius:ushort;
  rotation:float;

  aabb:AABB;
}

table Player {
  id:ulong;
  entity_type:EntityType;
  pos:Vec2f;
  radius:ushort;

  rotation:float;
  is_hit:bool = false;

  action_tick:ushort;
  name:string;

  equipment:[ubyte];

  health:uint;
  satiety:uint;
  body_temperature:uint;

  aabb:AABB;
}

table GameState {
  tick:ulong;

  // only present if player alive
  player:Player;
  inventory:[ItemStack];

  entities:[Entity];
}

table Welcome {
  server_name:string;
  map_size:Vec2f;
}

table Accept {
    // nothing to send with it, purely for signaling
}

table Obituary {
    // nothing to send with it, purely for signaling
    // maybe killer? or stats?
}

union ServerMessageBody { Welcome, GameState, Accept, Obituary }
table ServerMessage { body:ServerMessageBody; }

root_type ServerMessage;

