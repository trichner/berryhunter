// automatically generated by the FlatBuffers compiler, do not modify

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Input struct {
	_tab flatbuffers.Table
}

func GetRootAsInput(buf []byte, offset flatbuffers.UOffsetT) *Input {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Input{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Input) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Input) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Input) Tick() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Input) MutateTick(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Input) Movement(obj *Vec2f) *Vec2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Input) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Input) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Input) Action(obj *Action) *Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Action)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func InputStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func InputAddTick(builder *flatbuffers.Builder, tick uint64) {
	builder.PrependUint64Slot(0, tick, 0)
}
func InputAddMovement(builder *flatbuffers.Builder, movement flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(movement), 0)
}
func InputAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(2, rotation, 0.0)
}
func InputAddAction(builder *flatbuffers.Builder, action flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(action), 0)
}
func InputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
