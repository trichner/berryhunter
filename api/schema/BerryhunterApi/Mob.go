// automatically generated by the FlatBuffers compiler, do not modify

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Mob struct {
	_tab flatbuffers.Table
}

func GetRootAsMob(buf []byte, offset flatbuffers.UOffsetT) *Mob {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Mob{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Mob) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Mob) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Mob) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Mob) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Mob) EntityType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Mob) MutateEntityType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Mob) Pos(obj *Vec2f) *Vec2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Mob) Radius() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Mob) MutateRadius(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *Mob) Rotation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Mob) MutateRotation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Mob) Aabb(obj *AABB) *AABB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(AABB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Mob) MobId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Mob) MutateMobId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(16, n)
}

func MobStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func MobAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func MobAddEntityType(builder *flatbuffers.Builder, entityType uint16) {
	builder.PrependUint16Slot(1, entityType, 0)
}
func MobAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pos), 0)
}
func MobAddRadius(builder *flatbuffers.Builder, radius uint16) {
	builder.PrependUint16Slot(3, radius, 0)
}
func MobAddRotation(builder *flatbuffers.Builder, rotation float32) {
	builder.PrependFloat32Slot(4, rotation, 0.0)
}
func MobAddAabb(builder *flatbuffers.Builder, aabb flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(aabb), 0)
}
func MobAddMobId(builder *flatbuffers.Builder, mobId uint16) {
	builder.PrependUint16Slot(6, mobId, 0)
}
func MobEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
