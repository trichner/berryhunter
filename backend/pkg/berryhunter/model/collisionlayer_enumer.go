// Code generated by "enumer -type=CollisionLayer"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const (
	_CollisionLayerName_0      = "LayerNoneCollisionLayerPlayerStaticCollisionLayerActionCollision"
	_CollisionLayerLowerName_0 = "layernonecollisionlayerplayerstaticcollisionlayeractioncollision"
	_CollisionLayerName_1      = "LayerWeaponCollision"
	_CollisionLayerLowerName_1 = "layerweaponcollision"
	_CollisionLayerName_2      = "LayerRessourceCollision"
	_CollisionLayerLowerName_2 = "layerressourcecollision"
	_CollisionLayerName_3      = "LayerHeatCollision"
	_CollisionLayerLowerName_3 = "layerheatcollision"
	_CollisionLayerName_4      = "LayerBorderCollision"
	_CollisionLayerLowerName_4 = "layerbordercollision"
	_CollisionLayerName_5      = "LayerViewportCollision"
	_CollisionLayerLowerName_5 = "layerviewportcollision"
	_CollisionLayerName_6      = "LayerMobStaticCollision"
	_CollisionLayerLowerName_6 = "layermobstaticcollision"
	_CollisionLayerName_7      = "LayerPlayerCollision"
	_CollisionLayerLowerName_7 = "layerplayercollision"
)

var (
	_CollisionLayerIndex_0 = [...]uint8{0, 18, 44, 64}
	_CollisionLayerIndex_1 = [...]uint8{0, 20}
	_CollisionLayerIndex_2 = [...]uint8{0, 23}
	_CollisionLayerIndex_3 = [...]uint8{0, 18}
	_CollisionLayerIndex_4 = [...]uint8{0, 20}
	_CollisionLayerIndex_5 = [...]uint8{0, 22}
	_CollisionLayerIndex_6 = [...]uint8{0, 23}
	_CollisionLayerIndex_7 = [...]uint8{0, 20}
)

func (i CollisionLayer) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CollisionLayerName_0[_CollisionLayerIndex_0[i]:_CollisionLayerIndex_0[i+1]]
	case i == 4:
		return _CollisionLayerName_1
	case i == 8:
		return _CollisionLayerName_2
	case i == 16:
		return _CollisionLayerName_3
	case i == 32:
		return _CollisionLayerName_4
	case i == 64:
		return _CollisionLayerName_5
	case i == 128:
		return _CollisionLayerName_6
	case i == 256:
		return _CollisionLayerName_7
	default:
		return fmt.Sprintf("CollisionLayer(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CollisionLayerNoOp() {
	var x [1]struct{}
	_ = x[LayerNoneCollision-(0)]
	_ = x[LayerPlayerStaticCollision-(1)]
	_ = x[LayerActionCollision-(2)]
	_ = x[LayerWeaponCollision-(4)]
	_ = x[LayerRessourceCollision-(8)]
	_ = x[LayerHeatCollision-(16)]
	_ = x[LayerBorderCollision-(32)]
	_ = x[LayerViewportCollision-(64)]
	_ = x[LayerMobStaticCollision-(128)]
	_ = x[LayerPlayerCollision-(256)]
}

var _CollisionLayerValues = []CollisionLayer{LayerNoneCollision, LayerPlayerStaticCollision, LayerActionCollision, LayerWeaponCollision, LayerRessourceCollision, LayerHeatCollision, LayerBorderCollision, LayerViewportCollision, LayerMobStaticCollision, LayerPlayerCollision}

var _CollisionLayerNameToValueMap = map[string]CollisionLayer{
	_CollisionLayerName_0[0:18]:       LayerNoneCollision,
	_CollisionLayerLowerName_0[0:18]:  LayerNoneCollision,
	_CollisionLayerName_0[18:44]:      LayerPlayerStaticCollision,
	_CollisionLayerLowerName_0[18:44]: LayerPlayerStaticCollision,
	_CollisionLayerName_0[44:64]:      LayerActionCollision,
	_CollisionLayerLowerName_0[44:64]: LayerActionCollision,
	_CollisionLayerName_1[0:20]:       LayerWeaponCollision,
	_CollisionLayerLowerName_1[0:20]:  LayerWeaponCollision,
	_CollisionLayerName_2[0:23]:       LayerRessourceCollision,
	_CollisionLayerLowerName_2[0:23]:  LayerRessourceCollision,
	_CollisionLayerName_3[0:18]:       LayerHeatCollision,
	_CollisionLayerLowerName_3[0:18]:  LayerHeatCollision,
	_CollisionLayerName_4[0:20]:       LayerBorderCollision,
	_CollisionLayerLowerName_4[0:20]:  LayerBorderCollision,
	_CollisionLayerName_5[0:22]:       LayerViewportCollision,
	_CollisionLayerLowerName_5[0:22]:  LayerViewportCollision,
	_CollisionLayerName_6[0:23]:       LayerMobStaticCollision,
	_CollisionLayerLowerName_6[0:23]:  LayerMobStaticCollision,
	_CollisionLayerName_7[0:20]:       LayerPlayerCollision,
	_CollisionLayerLowerName_7[0:20]:  LayerPlayerCollision,
}

var _CollisionLayerNames = []string{
	_CollisionLayerName_0[0:18],
	_CollisionLayerName_0[18:44],
	_CollisionLayerName_0[44:64],
	_CollisionLayerName_1[0:20],
	_CollisionLayerName_2[0:23],
	_CollisionLayerName_3[0:18],
	_CollisionLayerName_4[0:20],
	_CollisionLayerName_5[0:22],
	_CollisionLayerName_6[0:23],
	_CollisionLayerName_7[0:20],
}

// CollisionLayerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CollisionLayerString(s string) (CollisionLayer, error) {
	if val, ok := _CollisionLayerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CollisionLayerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CollisionLayer values", s)
}

// CollisionLayerValues returns all values of the enum
func CollisionLayerValues() []CollisionLayer {
	return _CollisionLayerValues
}

// CollisionLayerStrings returns a slice of all String values of the enum
func CollisionLayerStrings() []string {
	strs := make([]string, len(_CollisionLayerNames))
	copy(strs, _CollisionLayerNames)
	return strs
}

// IsACollisionLayer returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CollisionLayer) IsACollisionLayer() bool {
	for _, v := range _CollisionLayerValues {
		if i == v {
			return true
		}
	}
	return false
}
