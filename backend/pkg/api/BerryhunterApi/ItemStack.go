// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ItemStack struct {
	_tab flatbuffers.Struct
}

func (rcv *ItemStack) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ItemStack) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ItemStack) Item() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *ItemStack) MutateItem(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *ItemStack) Count() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *ItemStack) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *ItemStack) Slot() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *ItemStack) MutateSlot(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func CreateItemStack(builder *flatbuffers.Builder, item byte, count uint32, slot byte) flatbuffers.UOffsetT {
	builder.Prep(4, 12)
	builder.Pad(3)
	builder.PrependByte(slot)
	builder.PrependUint32(count)
	builder.Pad(3)
	builder.PrependByte(item)
	return builder.Offset()
}
