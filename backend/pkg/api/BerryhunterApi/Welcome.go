// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Welcome struct {
	_tab flatbuffers.Table
}

func GetRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Welcome{}
	x.Init(buf, n+offset)
	return x
}

func FinishWelcomeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWelcome(buf []byte, offset flatbuffers.UOffsetT) *Welcome {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Welcome{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWelcomeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Welcome) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Welcome) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Welcome) ServerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Welcome) MapRadius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Welcome) MutateMapRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *Welcome) TotalDaycycleTicks() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Welcome) MutateTotalDaycycleTicks(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Welcome) DayTimeTicks() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Welcome) MutateDayTimeTicks(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func WelcomeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func WelcomeAddServerName(builder *flatbuffers.Builder, serverName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(serverName), 0)
}
func WelcomeAddMapRadius(builder *flatbuffers.Builder, mapRadius float32) {
	builder.PrependFloat32Slot(1, mapRadius, 0.0)
}
func WelcomeAddTotalDaycycleTicks(builder *flatbuffers.Builder, totalDaycycleTicks uint64) {
	builder.PrependUint64Slot(2, totalDaycycleTicks, 0)
}
func WelcomeAddDayTimeTicks(builder *flatbuffers.Builder, dayTimeTicks uint64) {
	builder.PrependUint64Slot(3, dayTimeTicks, 0)
}
func WelcomeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
