// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Placeable struct {
	_tab flatbuffers.Table
}

func GetRootAsPlaceable(buf []byte, offset flatbuffers.UOffsetT) *Placeable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Placeable{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlaceableBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlaceable(buf []byte, offset flatbuffers.UOffsetT) *Placeable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Placeable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlaceableBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Placeable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Placeable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Placeable) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Placeable) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Placeable) EntityType() EntityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return EntityType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Placeable) MutateEntityType(n EntityType) bool {
	return rcv._tab.MutateUint16Slot(6, uint16(n))
}

func (rcv *Placeable) StatusEffects(j int) StatusEffect {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return StatusEffect(rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2)))
	}
	return 0
}

func (rcv *Placeable) StatusEffectsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Placeable) MutateStatusEffects(j int, n StatusEffect) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), uint16(n))
	}
	return false
}

func (rcv *Placeable) Pos(obj *Vec2f) *Vec2f {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec2f)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Placeable) Radius() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Placeable) MutateRadius(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *Placeable) Item() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Placeable) MutateItem(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *Placeable) Aabb(obj *AABB) *AABB {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(AABB)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PlaceableStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func PlaceableAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func PlaceableAddEntityType(builder *flatbuffers.Builder, entityType EntityType) {
	builder.PrependUint16Slot(1, uint16(entityType), 0)
}
func PlaceableAddStatusEffects(builder *flatbuffers.Builder, statusEffects flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(statusEffects), 0)
}
func PlaceableStartStatusEffectsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func PlaceableAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(pos), 0)
}
func PlaceableAddRadius(builder *flatbuffers.Builder, radius uint16) {
	builder.PrependUint16Slot(4, radius, 0)
}
func PlaceableAddItem(builder *flatbuffers.Builder, item byte) {
	builder.PrependByteSlot(5, item, 0)
}
func PlaceableAddAabb(builder *flatbuffers.Builder, aabb flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(aabb), 0)
}
func PlaceableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
