// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BerryhunterApi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClientMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsClientMessage(buf []byte, offset flatbuffers.UOffsetT) *ClientMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClientMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishClientMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsClientMessage(buf []byte, offset flatbuffers.UOffsetT) *ClientMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClientMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedClientMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ClientMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClientMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClientMessage) BodyType() ClientMessageBody {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ClientMessageBody(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ClientMessage) MutateBodyType(n ClientMessageBody) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ClientMessage) Body(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func ClientMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClientMessageAddBodyType(builder *flatbuffers.Builder, bodyType ClientMessageBody) {
	builder.PrependByteSlot(0, byte(bodyType), 0)
}
func ClientMessageAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(body), 0)
}
func ClientMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
