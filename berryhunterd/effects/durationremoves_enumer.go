// Code generated by "enumer -type=DurationRemoves -json -text"; DO NOT EDIT.

//
package effects

import (
	"encoding/json"
	"fmt"
)

const _DurationRemovesName = "AllOneByOne"

var _DurationRemovesIndex = [...]uint8{0, 3, 11}

func (i DurationRemoves) String() string {
	if i < 0 || i >= DurationRemoves(len(_DurationRemovesIndex)-1) {
		return fmt.Sprintf("DurationRemoves(%d)", i)
	}
	return _DurationRemovesName[_DurationRemovesIndex[i]:_DurationRemovesIndex[i+1]]
}

var _DurationRemovesValues = []DurationRemoves{0, 1}

var _DurationRemovesNameToValueMap = map[string]DurationRemoves{
	_DurationRemovesName[0:3]:  0,
	_DurationRemovesName[3:11]: 1,
}

// DurationRemovesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DurationRemovesString(s string) (DurationRemoves, error) {
	if val, ok := _DurationRemovesNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DurationRemoves values", s)
}

// DurationRemovesValues returns all values of the enum
func DurationRemovesValues() []DurationRemoves {
	return _DurationRemovesValues
}

// IsADurationRemoves returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DurationRemoves) IsADurationRemoves() bool {
	for _, v := range _DurationRemovesValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DurationRemoves
func (i DurationRemoves) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DurationRemoves
func (i *DurationRemoves) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DurationRemoves should be a string, got %s", data)
	}

	var err error
	*i, err = DurationRemovesString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DurationRemoves
func (i DurationRemoves) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DurationRemoves
func (i *DurationRemoves) UnmarshalText(text []byte) error {
	var err error
	*i, err = DurationRemovesString(string(text))
	return err
}
