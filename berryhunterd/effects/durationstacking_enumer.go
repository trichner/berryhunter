// Code generated by "enumer -type=DurationStacking -json -text"; DO NOT EDIT.

//
package effects

import (
	"encoding/json"
	"fmt"
)

const _DurationStackingName = "ResetAddNone"

var _DurationStackingIndex = [...]uint8{0, 5, 8, 12}

func (i DurationStacking) String() string {
	if i < 0 || i >= DurationStacking(len(_DurationStackingIndex)-1) {
		return fmt.Sprintf("DurationStacking(%d)", i)
	}
	return _DurationStackingName[_DurationStackingIndex[i]:_DurationStackingIndex[i+1]]
}

var _DurationStackingValues = []DurationStacking{0, 1, 2}

var _DurationStackingNameToValueMap = map[string]DurationStacking{
	_DurationStackingName[0:5]:  0,
	_DurationStackingName[5:8]:  1,
	_DurationStackingName[8:12]: 2,
}

// DurationStackingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DurationStackingString(s string) (DurationStacking, error) {
	if val, ok := _DurationStackingNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DurationStacking values", s)
}

// DurationStackingValues returns all values of the enum
func DurationStackingValues() []DurationStacking {
	return _DurationStackingValues
}

// IsADurationStacking returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DurationStacking) IsADurationStacking() bool {
	for _, v := range _DurationStackingValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DurationStacking
func (i DurationStacking) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DurationStacking
func (i *DurationStacking) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DurationStacking should be a string, got %s", data)
	}

	var err error
	*i, err = DurationStackingString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DurationStacking
func (i DurationStacking) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DurationStacking
func (i *DurationStacking) UnmarshalText(text []byte) error {
	var err error
	*i, err = DurationStackingString(string(text))
	return err
}
